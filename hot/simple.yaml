heat_template_version: 2013-05-23

parameters:
  flavor:
    type: string
    description: Flavor to use for servers
    default: b.1c1gb
  volume_size:
    type: number
    description: Size for volumes
    default: 20
  image:
    type: string
    description: Image name or ID
    default: Ubuntu 22.04 Jammy Jellyfish x86_64
  key_name:
    default: ''
    type: string
    description: Keypair to inject into newly created servers
  public_net:
    type: string
    description: Public network ID
    default: ext-net
    constraints:
      - custom_constraint: neutron.network
  ipv6_subnetpool:
    type: string
    description: "Subnetpool name or ID (IPv6 only)"
    default: ipv6_tenant_pool
  ipv6_mode:
    type: string
    description: "Mode to be used for address assignment and router advertisement (IPv6 only)"
    default: slaac
    constraints:
      - allowed_values:
          - slaac
          - dhcpv6-stateful
          - dhcpv6-stateless
  config_drive:
    type: boolean
    description: Use config_drive for metadata discovery?
    default: true

resources:

  mybox:
    type: "OS::Nova::Server"
    properties:
      name: mybox
      block_device_mapping_v2:
        - image: { get_param: image }
          volume_size: { get_param: volume_size }
          delete_on_termination: true
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      config_drive: { get_param: config_drive }
      networks:
        - port: { get_resource: mybox_management_port }

  mybox_management_port:
    type: "OS::Neutron::Port"
    properties:
      network_id: { get_resource: mynet }
      security_groups:
        - { get_resource: mysecurity_group }

  mynet:
    type: "OS::Neutron::Net"
    properties:
      name: management-net

  mysub_net_ipv4:
    type: "OS::Neutron::Subnet"
    properties:
      name: management-sub-net
      network_id: { get_resource: mynet }
      cidr: 192.168.101.0/24
      gateway_ip: 192.168.101.1
      enable_dhcp: true
      dns_nameservers:
        - "8.8.8.8"
        - "8.8.4.4"
      allocation_pools:
        - start: "192.168.101.2"
          end: "192.168.101.50"

  mysub_net_ipv6:
    type: "OS::Neutron::Subnet"
    properties:
      name: management-sub-net
      ip_version: 6
      ipv6_address_mode: { get_param: ipv6_mode }
      ipv6_ra_mode: { get_param: ipv6_mode }
      subnetpool: { get_param: ipv6_subnetpool }
      network: { get_resource: mynet }
      enable_dhcp: true

  mysecurity_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Neutron security group rules
      name: mysecurity_group

  security_group_rule_icmp_ipv6:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: mysecurity_group }
      remote_ip_prefix: "::/0"
      ethertype: IPv6
      protocol: icmp
      direction: ingress

  security_group_rule_icmp_ipv4:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: mysecurity_group }
      remote_ip_prefix: "0.0.0.0/0"
      ethertype: IPv4
      protocol: icmp
      direction: ingress

  security_group_rule_tcp_ipv4:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: mysecurity_group }
      remote_ip_prefix: "0.0.0.0/0"
      ethertype: IPv4
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      direction: ingress

  security_group_rule_tcp_ipv6:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: mysecurity_group }
      remote_ip_prefix: "::/0"
      ethertype: IPv6
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      direction: ingress

  router:
    type: OS::Neutron::Router

  router_gateway:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router }
      network_id: { get_param: public_net }

  router_interface_ipv4:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: mysub_net_ipv4 }

  router_interface_ipv6:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: mysub_net_ipv6 }

  myfloating_ip:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: mybox_management_port }
    depends_on:
      - router_interface_ipv4
      - router_gateway

outputs:
  public_ip:
    description: Floating IP address in public network
    value: { get_attr: [ myfloating_ip, floating_ip_address ] }
